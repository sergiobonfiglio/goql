// Code generated by table-def-gen. DO NOT EDIT.

package main

import (
	"github.com/sergiobonfiglio/goql"
	"time"
)

type CategoriesTableDef struct {
	*goql.SqlableTable
	alias       *string
	CreatedAt   *goql.Col[time.Time]
	Description *goql.Col[string]
	Id          *goql.Col[int]
	Name        *goql.Col[string]
	ParentId    *goql.Col[int]
}

var _ goql.Table = &CategoriesTableDef{}

func newCategoriesTable() *CategoriesTableDef {
	tDef := &CategoriesTableDef{}
	tDef.CreatedAt = goql.NewCol[time.Time]("created_at", tDef)
	tDef.Description = goql.NewCol[string]("description", tDef)
	tDef.Id = goql.NewCol[int]("id", tDef)
	tDef.Name = goql.NewCol[string]("name", tDef)
	tDef.ParentId = goql.NewCol[int]("parent_id", tDef)
	tDef.SqlableTable = goql.NewSqlableTable(tDef)
	return tDef
}

var Categories = newCategoriesTable()

func (a *CategoriesTableDef) TableName() string {
	return "categories"
}

func (a *CategoriesTableDef) Alias() *string {
	return a.alias
}

func (a *CategoriesTableDef) As(x string) *CategoriesTableDef {
	newT := newCategoriesTable()
	newT.alias = &x
	return newT
}

func (a *CategoriesTableDef) Star() goql.ParametricSql {
	return goql.NewCol[string]("*", a)
}

type OrderItemsTableDef struct {
	*goql.SqlableTable
	alias     *string
	Id        *goql.Col[int]
	OrderId   *goql.Col[int]
	Price     *goql.Col[float64]
	ProductId *goql.Col[int]
	Quantity  *goql.Col[int]
}

var _ goql.Table = &OrderItemsTableDef{}

func newOrderItemsTable() *OrderItemsTableDef {
	tDef := &OrderItemsTableDef{}
	tDef.Id = goql.NewCol[int]("id", tDef)
	tDef.OrderId = goql.NewCol[int]("order_id", tDef)
	tDef.Price = goql.NewCol[float64]("price", tDef)
	tDef.ProductId = goql.NewCol[int]("product_id", tDef)
	tDef.Quantity = goql.NewCol[int]("quantity", tDef)
	tDef.SqlableTable = goql.NewSqlableTable(tDef)
	return tDef
}

var OrderItems = newOrderItemsTable()

func (a *OrderItemsTableDef) TableName() string {
	return "order_items"
}

func (a *OrderItemsTableDef) Alias() *string {
	return a.alias
}

func (a *OrderItemsTableDef) As(x string) *OrderItemsTableDef {
	newT := newOrderItemsTable()
	newT.alias = &x
	return newT
}

func (a *OrderItemsTableDef) Star() goql.ParametricSql {
	return goql.NewCol[string]("*", a)
}

type OrdersTableDef struct {
	*goql.SqlableTable
	alias       *string
	CreatedAt   *goql.Col[time.Time]
	Id          *goql.Col[int]
	Status      *goql.Col[string]
	TotalAmount *goql.Col[float64]
	UpdatedAt   *goql.Col[time.Time]
	UserId      *goql.Col[int]
}

var _ goql.Table = &OrdersTableDef{}

func newOrdersTable() *OrdersTableDef {
	tDef := &OrdersTableDef{}
	tDef.CreatedAt = goql.NewCol[time.Time]("created_at", tDef)
	tDef.Id = goql.NewCol[int]("id", tDef)
	tDef.Status = goql.NewCol[string]("status", tDef)
	tDef.TotalAmount = goql.NewCol[float64]("total_amount", tDef)
	tDef.UpdatedAt = goql.NewCol[time.Time]("updated_at", tDef)
	tDef.UserId = goql.NewCol[int]("user_id", tDef)
	tDef.SqlableTable = goql.NewSqlableTable(tDef)
	return tDef
}

var Orders = newOrdersTable()

func (a *OrdersTableDef) TableName() string {
	return "orders"
}

func (a *OrdersTableDef) Alias() *string {
	return a.alias
}

func (a *OrdersTableDef) As(x string) *OrdersTableDef {
	newT := newOrdersTable()
	newT.alias = &x
	return newT
}

func (a *OrdersTableDef) Star() goql.ParametricSql {
	return goql.NewCol[string]("*", a)
}

type ProductsTableDef struct {
	*goql.SqlableTable
	alias         *string
	CategoryId    *goql.Col[int]
	CreatedAt     *goql.Col[time.Time]
	Description   *goql.Col[string]
	Id            *goql.Col[int]
	Name          *goql.Col[string]
	Price         *goql.Col[float64]
	StockQuantity *goql.Col[int]
	UpdatedAt     *goql.Col[time.Time]
}

var _ goql.Table = &ProductsTableDef{}

func newProductsTable() *ProductsTableDef {
	tDef := &ProductsTableDef{}
	tDef.CategoryId = goql.NewCol[int]("category_id", tDef)
	tDef.CreatedAt = goql.NewCol[time.Time]("created_at", tDef)
	tDef.Description = goql.NewCol[string]("description", tDef)
	tDef.Id = goql.NewCol[int]("id", tDef)
	tDef.Name = goql.NewCol[string]("name", tDef)
	tDef.Price = goql.NewCol[float64]("price", tDef)
	tDef.StockQuantity = goql.NewCol[int]("stock_quantity", tDef)
	tDef.UpdatedAt = goql.NewCol[time.Time]("updated_at", tDef)
	tDef.SqlableTable = goql.NewSqlableTable(tDef)
	return tDef
}

var Products = newProductsTable()

func (a *ProductsTableDef) TableName() string {
	return "products"
}

func (a *ProductsTableDef) Alias() *string {
	return a.alias
}

func (a *ProductsTableDef) As(x string) *ProductsTableDef {
	newT := newProductsTable()
	newT.alias = &x
	return newT
}

func (a *ProductsTableDef) Star() goql.ParametricSql {
	return goql.NewCol[string]("*", a)
}

type UsersTableDef struct {
	*goql.SqlableTable
	alias     *string
	CreatedAt *goql.Col[time.Time]
	Email     *goql.Col[string]
	Id        *goql.Col[int]
	IsActive  *goql.Col[bool]
	Name      *goql.Col[string]
	UpdatedAt *goql.Col[time.Time]
}

var _ goql.Table = &UsersTableDef{}

func newUsersTable() *UsersTableDef {
	tDef := &UsersTableDef{}
	tDef.CreatedAt = goql.NewCol[time.Time]("created_at", tDef)
	tDef.Email = goql.NewCol[string]("email", tDef)
	tDef.Id = goql.NewCol[int]("id", tDef)
	tDef.IsActive = goql.NewCol[bool]("is_active", tDef)
	tDef.Name = goql.NewCol[string]("name", tDef)
	tDef.UpdatedAt = goql.NewCol[time.Time]("updated_at", tDef)
	tDef.SqlableTable = goql.NewSqlableTable(tDef)
	return tDef
}

var Users = newUsersTable()

func (a *UsersTableDef) TableName() string {
	return "users"
}

func (a *UsersTableDef) Alias() *string {
	return a.alias
}

func (a *UsersTableDef) As(x string) *UsersTableDef {
	newT := newUsersTable()
	newT.alias = &x
	return newT
}

func (a *UsersTableDef) Star() goql.ParametricSql {
	return goql.NewCol[string]("*", a)
}
