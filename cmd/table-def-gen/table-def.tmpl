// Code generated by table-def-gen. DO NOT EDIT.

package {{.Package}}

{{- if or .Imports (ne (GoqlImportMode) "none") }}
import (
	{{- if eq (GoqlImportMode) "full" }}
	"github.com/sergiobonfiglio/goql"
	{{- else if eq (GoqlImportMode) "dot" }}
	. "github.com/sergiobonfiglio/goql"
	{{- end }}
	{{- range .Imports }}
	"{{ . }}"
	{{- end }}
)
{{- end }}
{{- range .Tables }}
{{ template "table-def" . }}
{{- end }}

{{- define "table-def" }}
type {{ .TypeDefName }}TableDef struct {
    *{{GoqlPrefix}}SqlableTable
	alias *string
    {{- range .Columns }}
    {{ .Name }} *{{GoqlPrefix}}Col[{{ .Type }}]
    {{- end }}
}

var _ {{GoqlPrefix}}Table = &{{ .TypeDefName }}TableDef{}

func new{{ .TypeDefName }}Table() *{{ .TypeDefName }}TableDef {
	tDef := &{{ .TypeDefName }}TableDef{}
	{{- range .Columns }}
	tDef.{{ .Name }} = {{GoqlPrefix}}NewCol[{{ .Type }}]("{{ .SqlName }}", tDef)
	{{- end }}
	tDef.SqlableTable = {{GoqlPrefix}}NewSqlableTable(tDef)
	return tDef
}

var {{ .TypeDefName }} = new{{ .TypeDefName }}Table()

func (a *{{ .TypeDefName }}TableDef) TableName() string {
	return "{{ .SqlName }}"
}

func (a *{{ .TypeDefName }}TableDef) Alias() *string {
	return a.alias
}

func (a *{{ .TypeDefName }}TableDef) As(x string) *{{ .TypeDefName }}TableDef {
	newT := new{{ .TypeDefName }}Table()
	newT.alias = &x
	return newT
}

func (a *{{ .TypeDefName }}TableDef) Star() {{GoqlPrefix}}ParametricSql {
	return {{GoqlPrefix}}NewCol[string]("*", a)
}
{{- end }}

